# Script CreateDB
DROP TABLE IF EXISTS sys_params;
CREATE TABLE sys_params(
	xkey			VARCHAR(64) NOT NULL,
	value			VARCHAR(256)
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_sys_params_xkey ON sys_params(xkey);
INSERT INTO sys_params (xkey, value) VALUES ('db_model', '2.1');

DROP TABLE IF EXISTS binary_entries;
CREATE TABLE binary_entries(
	id				INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	data			BLOB
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;

DROP TABLE IF EXISTS hanzi_instances;
CREATE TABLE hanzi_instances(
	hanzi			INT,			-- The Hanzi, as a 32-bit integer
	flags			TINYINT,		-- 1: Hanzi occurs in simplified HW; 2: Hanzi occurs in traditional HW
	                                -- 4: Hanzi occurs at start of simplified HW; 8: start of traditional HW
	simp_count		INT,			-- Count of (different) simplified Hanzi in HW
	trad_count		INT,			-- Count of (different) traditional Hanzi in HW
	blob_id			INT				-- binary_entries.id
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_hanzi_instances_blob_id ON hanzi_instances(blob_id);

DROP TABLE IF EXISTS syll_instances;
CREATE TABLE syll_instances(
	toned_syll		INT,			-- Toned pinyin syllable ID
	syll_count		TINYINT,		-- Count of entry's distinct standard pinyin syllables
	blob_id			INT				-- binary_entries.id
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_syll_instances_blob_id ON syll_instances(blob_id);

DROP TABLE IF EXISTS norm_words;
CREATE TABLE norm_words(
	id				INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	word			VARCHAR(256)	-- The normalized word
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;

DROP TABLE IF EXISTS trg_instances;
CREATE TABLE trg_instances(
	norm_word_id	INT,			-- norm_words.id
	blob_id			INT,			-- binary_entries.id
	sense_ix		TINYINT			-- IX of sense within entry
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_trg_instances_blob_id ON trg_instances(blob_id);

DROP TABLE IF EXISTS prefix_words;
CREATE TABLE prefix_words(
	id				INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	prefix			BIGINT,						-- first four letters, encoded as 4 x short; last is lowest
	word			VARCHAR(128) NOT NULL,		-- the word
	count			INT,						-- occurrence count (so we know when not to offer as hint)
					UNIQUE KEY word (word(128))	-- word is a key: so we can increment/decrement count efficiently
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_prefix_words_prefix ON prefix_words(prefix);

DROP TABLE IF EXISTS word_freqs;
CREATE TABLE word_freqs(
	word			VARCHAR(64) NOT NULL,		-- simplified word
	freq			INT,						-- corpus frequency
					UNIQUE KEY word (word(64))	-- word is a key
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_word_freqs_word ON word_freqs(word);

DROP TABLE IF EXISTS entries;
CREATE TABLE entries(
	id				INT NOT NULL PRIMARY KEY,	-- IDs are random, not incremental
	hw				VARCHAR(256),				-- trad, simp and pinyin in one (as in CEDICT format)
	trg				VARCHAR(3072),				-- translations (as in CEDICT format)
	simp_hash		INT,						-- hash of simplified headword
	status			TINYINT,					-- 0: neutral/new; 1: approved; 2: flagged
	deleted			TINYINT,					-- 0: not deleted; 1: deleted
	bin_id			INT							-- binary_entries.id
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_entries_simp_hash ON entries(simp_hash);

DROP TABLE IF EXISTS modifs;
CREATE TABLE modifs(
	id				INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	parent_id		INT NOT NULL,				-- modifs.id, if this modif is part of a bulk change
												-- -1 for normal change, and the bulk parent itself
	hw_before		VARCHAR(256),				-- changed entry's HW before change, for instant diff in history
												-- null or "" if this is a bulk parent, and for entry's initial version
	trg_before		VARCHAR(3072),				-- changed entry's TRG before change, for instant diff in history
												-- null or "" if this is a bulk parent, and for entry's initial version
	status_before	TINYINT,					-- changed entry's status before change
												-- null or 99 if this is a bulk parent, and for entry's initial version
	timestamp		DATETIME NOT NULL,
	user_id			INT NOT NULL,
	note			VARCHAR(3072) NOT NULL,
	bulk_ref		INT NOT NULL,				-- positive value if this is a bulk parent. refers to reference article about change.
												-- also included in all of child changes
	chg				TINYINT NOT NULL,			-- 0: new; 1: delete; 2: edit; 3: note; 4: status-changed; 99: bulk
	entry_id		INT NOT NULL,				-- entries.id; -1 for bulk change
	count_a			INT NOT NULL DEFAULT 0,		-- in bulk parent: number of new entries
												-- normal change: number of previous changes in entry at top, or -1 in those past items
	count_b			INT							-- in bulk parent: number of changed entries
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_modifs_user_id ON modifs(user_id);
CREATE INDEX idx_modifs_entry_id ON modifs(entry_id);
CREATE INDEX idx_modifs_parent_id ON modifs(parent_id);
CREATE INDEX idx_modifs_count_a ON modifs(count_a);
CREATE INDEX idx_modifs_timestamp ON modifs(timestamp);

DROP TABLE IF EXISTS users;
CREATE TABLE users(
	id				INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	user_name		VARCHAR(96) NOT NULL,
	email			VARCHAR(768),
	pass_hash		VARCHAR(256),
	pass_salt		VARCHAR(256),
	status			TINYINT NOT NULL,			-- 0: active; 1: pending; 2: deleted; 3: placeholder
	registered		DATETIME NOT NULL,
	about			VARCHAR(768),				-- *optional* intro text
	location		VARCHAR(768),				-- *optional* location
	contrib_score	INT NOT NULL DEFAULT 0,		-- contribution score (effectively a cached value)
	perms			INT NOT NULL DEFAULT 0		-- special permissions (flags)
) ENGINE=InnoDB CHARACTER SET=utf8;
CREATE INDEX idx_users_email ON users(email);

DROP TABLE IF EXISTS conf_tokens;
CREATE TABLE conf_tokens(
	user_id			INT NOT NULL,						-- users.id
	data			VARCHAR(768),						-- optional data (e.g., new email address for email change). MUST NOT be same as code.
	code			VARCHAR(128) NOT NULL PRIMARY KEY,	-- confirmation code (embedded in emailed link)
	expiry			DATETIME NOT NULL,					-- token's time of expiry
	action			INT NOT NULL						-- 0: register; 1: password reset; 2: change email
) ENGINE=InnoDB CHARACTER SET=utf8;
CREATE INDEX idx_conf_tokens_expiry ON conf_tokens(expiry);

# End

# Script InsConfToken
# @user_id INT
# @code VARCHAR
# @expiry DATETIME
# @action INT
INSERT INTO conf_tokens (user_id, data, code, expiry, action)
VALUES (@user_id, @code, @code, @expiry, @action)
ON DUPLICATE KEY UPDATE code=@code;
# End

# Script UpdConfTokenData
# @code VARCHAR
# @data VARCHAR
UPDATE conf_tokens SET data=@data WHERE code=@code;
# End

# Script SelConfToken
# @code VARCHAR
SELECT * FROM conf_tokens WHERE code=@code;
# End

# Script DelConfToken
# @code VARCHAR
DELETE FROM conf_tokens WHERE code=@code;
# End

# Script DelOldConfTokens
# @expiry_before DATETIME
DELETE FROM conf_tokens WHERE expiry<@expiry_before;
# End

# Script InsImplicitUser
# @user_name VARCHAR
# @registered DATETIME
# @about VARCHAR
INSERT INTO users (user_name, status, registered, about)
VALUES (@user_name, 3, @registered, @about);
# End

# Script InsNewUser
# @user_name VARCHAR
# @email VARCHAR
# @pass_hash VARCHAR
# @pass_salt VARCHAR
# @registered DATETIME
INSERT INTO users (user_name, email, pass_hash, pass_salt, status, registered)
VALUES (@user_name, @email, @pass_hash, @pass_salt, 1, @registered);
# End

# Script AddContribScore
# @id INT
# @val INT
UPDATE users SET contrib_score=contrib_score+@val WHERE id=@id;
# End

# Script SelUserByName
# @user_name VARCHAR
SELECT * FROM users WHERE user_name=@user_name;
# End

# Script SelUserByEmail
# @email VARCHAR
SELECT * FROM users WHERE email=@email;
# End

# Script SelUserById
# @id INT
SELECT * FROM users WHERE id=@id;
# End

# Script SelAllUsers
SELECT * FROM users;
# End

# Script UpdUserStatus
# @id INT
# @status INT
UPDATE users SET status=@status WHERE id=@id;
# End

# Script UpdUserEmail
# @id INT
# @email VARCHAR
UPDATE users SET email=@email WHERE id=@id;
# End

# Script UpdateUserInfo
# @id INT
# @new_location VARCHAR
# @new_about VARCHAR
UPDATE users SET location=@new_location, about=@new_about WHERE id=@id;
# End

# Script UpdatePassword
# @id INT
# @new_pass_hash VARCHAR
# @new_pass_salt VARCHAR
UPDATE users SET pass_hash=@new_pass_hash, pass_salt=@new_pass_salt WHERE id=@id;
# End

# Script UpdateEmail
# @id INT
# @new_email VARCHAR
UPDATE users SET email=@new_email WHERE id=@id;
# End

# Script InsHanziInstance
# @hanzi INT
# @flags TINYINT
# @simp_count INT
# @trad_count INT
# @blob_id INT
INSERT INTO hanzi_instances (hanzi, flags, simp_count, trad_count, blob_id)
VALUES (@hanzi, @flags, @simp_count, @trad_count, @blob_id);
# End

# Script InsBinaryEntry
# @data BLOB
INSERT INTO binary_entries (data) VALUES (@data);
# End

# Script InsSkeletonEntry
# @id INT
INSERT INTO entries (id) VALUES (@id)
ON DUPLICATE KEY UPDATE id=@id;
# End

# Script SelHwByEntryId
# @id INT
SELECT hw FROM entries WHERE id=@id;
# End

# Script SelEntryById
# @id INT
SELECT hw, trg, status FROM entries WHERE id=@id;
# End

# Script SelEntryByHead
# @hw VARCHAR
SELECT id, trg, status FROM entries WHERE hw=@hw;
# End

# Script SelEntryStatus
# @id INT
SELECT status FROM entries WHERE id=@id;
# End

# Script UpdSkeletonEntry
# @id INT
# @hw VARCHAR
# @trg VARCHAR
# @simp_hash INT
# @status TINYINT
# @deleted TINYINT
# @bin_id INT
UPDATE entries
SET hw=@hw, trg=@trg, simp_hash=@simp_hash, status=@status, deleted=@deleted, bin_id=@bin_id
WHERE id=@id;
# End

# Script SelBinByEntryId
# @id INT
SELECT B.data, B.id FROM binary_entries B
JOIN entries E ON E.bin_id=B.id AND E.id=@id;
# End

# Script UpdEntryTrg
# @id INT
# @trg VARCHAR
# @bin_id INT
UPDATE entries SET trg=@trg, bin_id=@bin_id WHERE id=@id;
# End

# Script UpdEntryHeadAndTrg
# @id INT
# @hw VARCHAR
# @simp_hash INT
# @trg VARCHAR
# @bin_id INT
UPDATE entries SET hw=@hw, simp_hash=@simp_hash, trg=@trg, bin_id=@bin_id WHERE id=@id;
# End

# Script UpdEntryStatus
# @id INT
# @status TINYINT
UPDATE entries SET status=@status WHERE id=@id;
# End

# Script UpdBinaryEntry
# @id INT
# @data BLOB
UPDATE binary_entries SET data=@data WHERE id=@id;
# End

# Script InsBulkModif
# @timestamp DATETIME
# @user_id INT
# @note VARCHAR
# @bulk_ref INT
INSERT INTO modifs (parent_id, timestamp, user_id, note, bulk_ref, chg, entry_id)
VAlUES (-1, @timestamp, @user_id, @note, @bulk_ref, 99, -1);
# End

# Script UpdBulkModifCounts
# @id INT
# @count_a INT
# @count_b INT
UPDATE modifs SET count_a=@count_a, count_b=@count_b WHERE id=@id;
# End

# Script InsModif
# @parent_id INT
# @bulk_ref INT
# @hw_before VARCHAR
# @trg_before VARCHAR
# @status_before TINYINT
# @timestamp DATETIME
# @user_id INT
# @note VARCHAR
# @chg INT
# @entry_id INT
INSERT INTO modifs (parent_id, hw_before, trg_before, status_before, timestamp, user_id, note, bulk_ref, chg, entry_id)
VAlUES (@parent_id, @hw_before, @trg_before, @status_before, @timestamp, @user_id, @note, @bulk_ref, @chg, @entry_id);
# End

# Script InsModifPreCounts1
# @top_id INT
# @entry_id INT
UPDATE modifs,
(SELECT COUNT(*) AS cnt FROM modifs WHERE entry_id=@entry_id) X
SET count_a = X.cnt-1 WHERE id=@top_id;
# End

# Script InsModifPreCounts2
# @top_id INT
# @entry_id INT
UPDATE modifs SET count_a=-1 WHERE id<>@top_id AND entry_id=@entry_id;
# End

# Script SelCountHead
# @hw VARCHAR
SELECT COUNT(*) FROM entries WHERE hw=@hw;
# End

# Script GetLatestChange
SELECT timestamp FROM modifs ORDER BY timestamp DESC LIMIT 1;
# End

# Script GetEntryChanges
# @entry_id INT
SELECT M.timestamp, M.note, M.chg, M.bulk_ref, U.id, U.user_name, M.count_a, M.count_b, M.hw_before, M.trg_before, M.status_before, E.status
FROM entries E
JOIN modifs M ON M.entry_id=E.id
JOIN users U ON U.id=M.user_id
WHERE E.id=@entry_id;
# End

# Script GetChangeCount
SELECT COUNT(*) FROM modifs WHERE parent_id=-1 AND count_a<>-1;
# End

# https://explainextended.com/2009/10/23/mysql-order-by-limit-performance-late-row-lookups/
# Script SelModifPage
# @page_start INT
# @page_len INT
SELECT  M.id, M.timestamp, E.id, E.hw, E.trg, M.note, M.chg, M.bulk_ref, U.id, U.user_name, M.count_a, M.count_b, M.hw_before, M.trg_before, M.status_before, E.status
FROM	(
		SELECT id, entry_id, user_id, timestamp FROM modifs WHERE parent_id=-1 AND count_a<>-1
		ORDER BY timestamp DESC LIMIT @page_start, @page_len
		) X
JOIN modifs M ON M.id = X.id
LEFT OUTER JOIN entries E ON E.id = X.entry_id
JOIN users U ON U.id = X.user_id
ORDER BY M.timestamp DESC;
# End

# Script SelAllHistory
SELECT E.id, E.hw, E.trg, E.status, E.deleted, M.user_id, M.timestamp, M.note, M.bulk_ref, M.chg, M.hw_before, M.trg_before, M.status_before
FROM entries E
JOIN modifs M ON M.entry_id=E.id
ORDER BY E.id;
# End

# Script SelBinaryEntry
# @blob_id INT
SELECT data FROM binary_entries WHERE id=@blob_id;
# End

# Script SelBinaryEntry10
# @id0 INT
# @id1 INT
# @id2 INT
# @id3 INT
# @id4 INT
# @id5 INT
# @id6 INT
# @id7 INT
# @id8 INT
# @id9 INT
SELECT data, id FROM binary_entries WHERE id=@id0 OR id=@id1 OR id=@id2 OR id=@id3 OR id=@id4 OR id=@id5 OR id=@id6 OR id=@id7 OR id=@id8 OR id=@id9;
# End

# Script SelHanziInstances
SELECT hanzi, flags, simp_count, trad_count, blob_id FROM hanzi_instances;
# End

# Script DelEntryHanziInstances
# @blob_id INT
DELETE from hanzi_instances WHERE blob_id=@blob_id;
# End

# Script DelEntryTrgInstances
# @blob_id INT
DELETE from trg_instances WHERE blob_id=@blob_id;
# End

# Script SelTrgInstances
SELECT word, norm_word_id, blob_id, sense_ix FROM norm_words, trg_instances WHERE id=norm_word_id;
# End

# Script SelNormWords
SELECT id, word FROM norm_words;
# End

# Script InsNormWord
# @word VARCHAR
INSERT INTO norm_words (word) VALUES (@word);
# End

# Script InsTrgInstance
# @norm_word_id INT
# @blob_id INT
# @sense_ix TINYINT
INSERT INTO trg_instances (norm_word_id, blob_id, sense_ix) VALUES (@norm_word_id, @blob_id, @sense_ix);
# End

# Script InsUpdPrefixWord
# @prefix BIGINT
# @word VARCHAR
# @count INT
INSERT INTO prefix_words (prefix, word, count) VALUES (@prefix, @word, @count)
ON DUPLICATE KEY UPDATE count = count + @count;
# End

# Script SelPrefixWords
# @min BIGINT
# @max BIGINT
SELECT word, count FROM prefix_words WHERE prefix >= @min AND prefix <= @max;
# End

# Script InsFreq
# @word VARCHAR
# @freq INT
INSERT INTO word_freqs (word, freq) VALUES (@word, @freq);
# End

# Script SelFreq
# @word VARCHAR
SELECT freq FROM word_freqs WHERE word=@word;
# End

# Script SelSyllInstances
SELECT toned_syll, syll_count, blob_id FROM syll_instances;
# End

# Script InsSyllInstance
# @toned_syll INT
# @syll_count TINYINT
# @blob_id INT
INSERT INTO syll_instances (toned_syll, syll_count, blob_id) VALUES (@toned_syll, @syll_count, @blob_id);
# End

# Script DelEntrySyllInstances
# @blob_id INT
DELETE from syll_instances WHERE blob_id=@blob_id;
# End

