# Script CreateDB
DROP TABLE IF EXISTS binary_entries;
CREATE TABLE binary_entries(
	id				INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	data			BLOB
);

DROP TABLE IF EXISTS hanzi_instances;
CREATE TABLE hanzi_instances(
	hanzi			INT,			-- The Hanzi, as a 32-bit integer
	flags			TINYINT,		-- 1: Hanzi occurs in simplified HW; 2: Hanzi occurs in traditional HW
	                                -- 4: Hanzi occurs at start of simplified HW; 8: start of traditional HW
	simp_count		INT,			-- Count of (different) simplified Hanzi in HW
	trad_count		INT,			-- Count of (different) traditional Hanzi in HW
	blob_id			INT				-- binary_entries.id
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_hanzi_instances_blob_id ON hanzi_instances(blob_id);

DROP TABLE IF EXISTS norm_words;
CREATE TABLE norm_words(
	id				INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	word			VARCHAR(256)	-- The normalized word
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;

DROP TABLE IF EXISTS trg_instances;
CREATE TABLE trg_instances(
	norm_word_id	INT,			-- norm_words.id
	blob_id			INT,			-- binary_entries.id
	sense_ix		TINYINT			-- IX of sense within entry
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_trg_instances_blob_id ON trg_instances(blob_id);

DROP TABLE IF EXISTS prefix_words;
CREATE TABLE prefix_words(
	id				INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	prefix			BIGINT,						-- first four letters, encoded as 4 x short; last is lowest
	word			VARCHAR(128) NOT NULL,		-- the word
	count			INT,						-- occurrence count (so we know when not to offer as hint)
					UNIQUE KEY word (word(128))	-- word is a key: so we can increment/decrement count efficiently
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_prefix_words_prefix ON prefix_words(prefix);

DROP TABLE IF EXISTS word_freqs;
CREATE TABLE word_freqs(
	word			VARCHAR(64) NOT NULL,		-- simplified word
	freq			INT,						-- corpus frequency
					UNIQUE KEY word (word(64))	-- word is a key
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_word_freqs_word ON word_freqs(word);

DROP TABLE IF EXISTS entries;
CREATE TABLE entries(
	id				INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	hw				VARCHAR(256),	-- trad, simp and pinyin in one (as in CEDICT format)
	trg				VARCHAR(3072),	-- translations (as in CEDICT format)
	simp_hash		INT,			-- hash of simplified headword
	status			TINYINT,		-- 0: neutral/new; 1: approved; 2: flagged
	deleted			TINYINT,		-- 0: not deleted; 1: deleted
	last_modif_id	INT,			-- modifs.id; "skips over" bulk modifs!
	bin_id			INT				-- binary_entries.id
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_entries_simp_hash ON entries(simp_hash);
CREATE INDEX idx_entries_last_modif_id ON entries(last_modif_id);

DROP TABLE IF EXISTS modifs;
CREATE TABLE modifs(
	id				INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	hw_before		VARCHAR(256),	-- changed entry's HW before change, for instant diff in history
	trg_before		VARCHAR(3072),	-- changed entry's TRG before change, for instant diff in history
	hw_after		VARCHAR(256),	-- only filled if next change is an intervening bulk
	trg_after		VARCHAR(3072),	-- only filled if next change is an intervening bulk
	timestamp		DATETIME,
	user_id			INT,
	note			VARCHAR(3072),
	chg				TINYINT,		-- 0: new; 1: delete; 2: edit; 3: note; 4: flag; 5: approve; 6: bulk import
	entry_id		INT				-- entries.id
) ENGINE=InnoDB CHARACTER SET=utf8 COLLATE utf8_general_ci;
CREATE INDEX idx_modifs_user_id ON modifs(user_id);
CREATE INDEX idx_modifs_entry_id ON modifs(entry_id);

DROP TABLE IF EXISTS bulk_modifs;
CREATE TABLE bulk_modifs(
	modif_id		INT,			-- modifs.id
	entry_id		INT				-- entries.id
) ENGINE=InnoDB CHARACTER SET=utf8;
CREATE INDEX idx_bulk_modifs_modif_id ON bulk_modifs(modif_id);
CREATE INDEX idx_bulk_modifs_entry_id ON bulk_modifs(entry_id);
# End

# Script InsHanziInstance
# @hanzi INT
# @flags TINYINT
# @simp_count INT
# @trad_count INT
# @blob_id INT
INSERT INTO hanzi_instances (hanzi, flags, simp_count, trad_count, blob_id)
VALUES (@hanzi, @flags, @simp_count, @trad_count, @blob_id);
# End

# Script InsBinaryEntry
# @data BLOB
INSERT INTO binary_entries (data) VALUES (@data);
# End

# Script InsEntry
# @hw VARCHAR
# @trg VARCHAR
# @simp_hash INT
# @status TINYINT
# @deleted TINYINT
# @bin_id INT
INSERT INTO entries (hw, trg, simp_hash, status, deleted, bin_id)
VALUES (@hw, @trg, @simp_hash, @status, @deleted, @bin_id);
# End

# Script InsDummyForBulk
INSERT INTO entries (deleted)
VALUES (1);
# End

# Script InsModifForBulk
# @timestamp DATETIME
# @user_id INT
# @note VARCHAR
# @dummy_entry_id INT
INSERT INTO modifs (timestamp, user_id, note, chg, entry_id)
VALUES (@timestamp, @user_id, @note, 6, @dummy_entry_id);
# End

# Script UpdLastModif
# @entry_id INT
# @last_modif_id INT
UPDATE entries SET last_modif_id=@last_modif_id WHERE id=@entry_id;
# End

# Script InsBulkModif
# @modif_id INT
# @entry_id INT
INSERT INTO bulk_modifs (modif_id, entry_id)
VALUES (@modif_id, @entry_id);
# End

# Script InsModifNew
# @timestamp DATETIME
# @user_id INT
# @note VARCHAR
# @entry_id INT
INSERT INTO modifs (timestamp, user_id, note, chg, entry_id)
VALUES (@timestamp, @user_id, @note, 0, @entry_id);
# End

# Script SelCountHead
# @hw VARCHAR
SELECT COUNT(*) FROM entries WHERE hw=@hw;
# End

# Script GetChangeCount
SELECT COUNT(*) FROM entries WHERE last_modif_id IS NOT NULL;
# End

# https://explainextended.com/2009/10/23/mysql-order-by-limit-performance-late-row-lookups/
# Script SelModifPage
# @page_start INT
# @page_len INT
SELECT  M.timestamp, E.hw, E.trg, M.note, M.chg
FROM	(
		SELECT last_modif_id
		FROM entries
		ORDER BY last_modif_id DESC
		LIMIT @page_start, @page_len
		) X
JOIN entries E ON E.last_modif_id = X.last_modif_id
JOIN modifs M ON M.id = E.last_modif_id
ORDER BY E.last_modif_id DESC;
# End

# Script SelBinaryEntry
# @blob_id INT
SELECT data FROM binary_entries WHERE id=@blob_id;
# End

# Script SelBinaryEntry10
# @id0 INT
# @id1 INT
# @id2 INT
# @id3 INT
# @id4 INT
# @id5 INT
# @id6 INT
# @id7 INT
# @id8 INT
# @id9 INT
SELECT data, id FROM binary_entries WHERE id=@id0 OR id=@id1 OR id=@id2 OR id=@id3 OR id=@id4 OR id=@id5 OR id=@id6 OR id=@id7 OR id=@id8 OR id=@id9;
# End

# Script SelHanziInstances
SELECT hanzi, flags, simp_count, trad_count, blob_id FROM hanzi_instances;
# End

# Script DelEntryHanziInstances
# @blob_id INT
DELETE from hanzi_instances WHERE blob_id=@blob_id;
# End

# Script DelEntryTrgInstances
# @blob_id INT
DELETE from trg_instances WHERE blob_id=@blob_id;
# End

# Script SelTrgInstances
SELECT word, norm_word_id, blob_id, sense_ix FROM norm_words, trg_instances WHERE id=norm_word_id;
# End

# Script SelNormWords
SELECT id, word FROM norm_words;
# End

# Script InsNormWord
# @word VARCHAR
INSERT INTO norm_words (word) VALUES (@word);
# End

# Script InsTrgInstance
# @norm_word_id INT
# @blob_id INT
# @sense_ix TINYINT
INSERT INTO trg_instances (norm_word_id, blob_id, sense_ix) VALUES (@norm_word_id, @blob_id, @sense_ix);
# End

# Script InsUpdPrefixWord
# @prefix BIGINT
# @word VARCHAR
# @count INT
INSERT INTO prefix_words (prefix, word, count) VALUES (@prefix, @word, @count)
ON DUPLICATE KEY UPDATE count = count + @count;
# End

# Script SelPrefixWords
# @min BIGINT
# @max BIGINT
SELECT word, count FROM prefix_words WHERE prefix >= @min AND prefix <= @max;
# End

# Script InsFreq
# @word VARCHAR
# @freq INT
INSERT INTO word_freqs (word, freq) VALUES (@word, @freq);
# End

# Script SelFreq
# @word VARCHAR
SELECT freq FROM word_freqs WHERE word=@word;
# End

